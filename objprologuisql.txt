%   Copyright 2012 Adam Ritter
%
%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%
%       http://www.apache.org/licenses/LICENSE-2.0
%
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.

main::
  vbox @ (
    header @(background_color:blue),
	hbox @ (
	  vbox @ (
	    me.small,
		all_pages)),
      current_page)

		
widget:person.small::
  hbox @ (
    small_photo,
	name)
	
person:me::
 people[session.id]

 #------
 dbfield(Table, Field, Clause, Out) :-
   clause(Table, Args, Clause),
  call(Table, Args),
  tablelookup(Table, Field, Args, Out),

  ----
  me(Out) :-
    dbfield(person, id, Out, SessionId), 
    id(session, SessionId),
    Out is_a person
  --
 
widget:page.mini_renderer::
	hbox @ (
	  icon,
	  text,
	  counter)
	    
page.counter.render::
  background_color: 'light-blue'
  foreground_color: 'dark-blue'
 
pages_page.counter::
  comment_threads.count(has_new_comment)
  
has_new_comment::
  comments.has(new)

comment.new::
  not(seen)
  
  ----
  # Single inharitance
  new(Comment, Out) :- Comment is_a comment, !,
    not(seen(Comment, Out))
  ---
  
object.seen::
  me.seen(this)
  
  ----
  seen(Object, Out) :- Object is_a object, !,
    seen(me, Object, Out)
	---
 
 text.render::
   emit
 
  ----
  :- add_type(render, text).
  render(Object, Out) :- select_type(render, Object, Type),
    render(Type, Object, Out).
  render(text, Object, Out) :-
    emit(Object, Out).
	---
 
 widget.render::
   container.render
  ----
  ..
  render(widget, Widget, Out) :- Text is_a text, !,
    lookup(Widget, container, Container),
	render(Container, Out)
	---
 
 image.tag::
   html_tag @ (
     name: img,
	 src: src)
	 
	  ----
  tag(Image, Out) :- Image is_a image, !,
    html_tag(H, Out),
	name(img, Img),
	lookup(Image, src, Src),
	attribute(H, src, Src)
	---
	 
 image.render::
   tag.render
 
 comment.render::
   assert(seen)
 
 onassert(comment.seen):
   # Comment was seen by me
   assert(seen(me))
   
 onassert(comment.seen(Person)):
   execute(seen(Comment, Person))
	    
%%%% Demo for database access
%%%% Needs database with user: id, name; address: id, user_id, address

execute('select user.name as name, address.address as address from user, address where user.id = address.user_id',
        Result) :- Result = ['John', 'Budapest']; Result = ['Jane', 'New York'].

database(user, [id, name]).
database(address, [id, user_id, address]).
user_address(Name, Address) :- user(ID, Name), address(_, ID, Address).

:- user_address_ui::
  hbox @ [
    text('Name: '),
    text(Name),
    text(', address: '),
    text(Address)	]
  :: user_address(Name, Address).
 

:- demo::
  vbox @ [
    user_address_ui ].
 
 check(demo(D), render(D, 'Name: John, address: Budapest<br>Name: Jane, address: New York<br>')).
 % Alternative query
 user_address(Z, Address) :- user(User), Z is User.name, Address is User.address.address.
 
 %%% Demo for inserting either new address or new address with new user (sounds fun :-) ).
 